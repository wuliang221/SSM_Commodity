<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.dao.GoodsMapper" >
  <resultMap id="BaseResultMap" type="com.pojo.Goods" >
    <id column="goodsNo" property="goodsno" jdbcType="INTEGER" />
    <result column="typeNo" property="typeno" jdbcType="INTEGER" />
    <result column="supplierNo" property="supplierno" jdbcType="INTEGER" />
    <result column="goodsName" property="goodsname" jdbcType="VARCHAR" />
    <result column="goodsNorm" property="goodsnorm" jdbcType="VARCHAR" />
    <result column="goodsUnit" property="goodsunit" jdbcType="VARCHAR" />
    <result column="goodsCount" property="goodscount" jdbcType="INTEGER" />
    <result column="goodsOutprise" property="goodsoutprise" jdbcType="DOUBLE" />
    <result column="goodsInprise" property="goodsinprise" jdbcType="DOUBLE" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    goodsNo, typeNo, supplierNo, goodsName, goodsNorm, goodsUnit, goodsCount, goodsOutprise, 
    goodsInprise
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.pojo.GoodsExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from goods
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from goods
    where goodsNo = #{goodsno,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from goods
    where goodsNo = #{goodsno,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.pojo.GoodsExample" >
    delete from goods
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.pojo.Goods" >
    insert into goods (goodsNo, typeNo, supplierNo, 
      goodsName, goodsNorm, goodsUnit, 
      goodsCount, goodsOutprise, goodsInprise
      )
    values (#{goodsno,jdbcType=INTEGER}, #{typeno,jdbcType=INTEGER}, #{supplierno,jdbcType=INTEGER}, 
      #{goodsname,jdbcType=VARCHAR}, #{goodsnorm,jdbcType=VARCHAR}, #{goodsunit,jdbcType=VARCHAR}, 
      #{goodscount,jdbcType=INTEGER}, #{goodsoutprise,jdbcType=DOUBLE}, #{goodsinprise,jdbcType=DOUBLE}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.pojo.Goods" >
    insert into goods
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="goodsno != null" >
        goodsNo,
      </if>
      <if test="typeno != null" >
        typeNo,
      </if>
      <if test="supplierno != null" >
        supplierNo,
      </if>
      <if test="goodsname != null" >
        goodsName,
      </if>
      <if test="goodsnorm != null" >
        goodsNorm,
      </if>
      <if test="goodsunit != null" >
        goodsUnit,
      </if>
      <if test="goodscount != null" >
        goodsCount,
      </if>
      <if test="goodsoutprise != null" >
        goodsOutprise,
      </if>
      <if test="goodsinprise != null" >
        goodsInprise,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="goodsno != null" >
        #{goodsno,jdbcType=INTEGER},
      </if>
      <if test="typeno != null" >
        #{typeno,jdbcType=INTEGER},
      </if>
      <if test="supplierno != null" >
        #{supplierno,jdbcType=INTEGER},
      </if>
      <if test="goodsname != null" >
        #{goodsname,jdbcType=VARCHAR},
      </if>
      <if test="goodsnorm != null" >
        #{goodsnorm,jdbcType=VARCHAR},
      </if>
      <if test="goodsunit != null" >
        #{goodsunit,jdbcType=VARCHAR},
      </if>
      <if test="goodscount != null" >
        #{goodscount,jdbcType=INTEGER},
      </if>
      <if test="goodsoutprise != null" >
        #{goodsoutprise,jdbcType=DOUBLE},
      </if>
      <if test="goodsinprise != null" >
        #{goodsinprise,jdbcType=DOUBLE},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.pojo.GoodsExample" resultType="java.lang.Integer" >
    select count(*) from goods
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update goods
    <set >
      <if test="record.goodsno != null" >
        goodsNo = #{record.goodsno,jdbcType=INTEGER},
      </if>
      <if test="record.typeno != null" >
        typeNo = #{record.typeno,jdbcType=INTEGER},
      </if>
      <if test="record.supplierno != null" >
        supplierNo = #{record.supplierno,jdbcType=INTEGER},
      </if>
      <if test="record.goodsname != null" >
        goodsName = #{record.goodsname,jdbcType=VARCHAR},
      </if>
      <if test="record.goodsnorm != null" >
        goodsNorm = #{record.goodsnorm,jdbcType=VARCHAR},
      </if>
      <if test="record.goodsunit != null" >
        goodsUnit = #{record.goodsunit,jdbcType=VARCHAR},
      </if>
      <if test="record.goodscount != null" >
        goodsCount = #{record.goodscount,jdbcType=INTEGER},
      </if>
      <if test="record.goodsoutprise != null" >
        goodsOutprise = #{record.goodsoutprise,jdbcType=DOUBLE},
      </if>
      <if test="record.goodsinprise != null" >
        goodsInprise = #{record.goodsinprise,jdbcType=DOUBLE},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update goods
    set goodsNo = #{record.goodsno,jdbcType=INTEGER},
      typeNo = #{record.typeno,jdbcType=INTEGER},
      supplierNo = #{record.supplierno,jdbcType=INTEGER},
      goodsName = #{record.goodsname,jdbcType=VARCHAR},
      goodsNorm = #{record.goodsnorm,jdbcType=VARCHAR},
      goodsUnit = #{record.goodsunit,jdbcType=VARCHAR},
      goodsCount = #{record.goodscount,jdbcType=INTEGER},
      goodsOutprise = #{record.goodsoutprise,jdbcType=DOUBLE},
      goodsInprise = #{record.goodsinprise,jdbcType=DOUBLE}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.pojo.Goods" >
    update goods
    <set >
      <if test="typeno != null" >
        typeNo = #{typeno,jdbcType=INTEGER},
      </if>
      <if test="supplierno != null" >
        supplierNo = #{supplierno,jdbcType=INTEGER},
      </if>
      <if test="goodsname != null" >
        goodsName = #{goodsname,jdbcType=VARCHAR},
      </if>
      <if test="goodsnorm != null" >
        goodsNorm = #{goodsnorm,jdbcType=VARCHAR},
      </if>
      <if test="goodsunit != null" >
        goodsUnit = #{goodsunit,jdbcType=VARCHAR},
      </if>
      <if test="goodscount != null" >
        goodsCount = #{goodscount,jdbcType=INTEGER},
      </if>
      <if test="goodsoutprise != null" >
        goodsOutprise = #{goodsoutprise,jdbcType=DOUBLE},
      </if>
      <if test="goodsinprise != null" >
        goodsInprise = #{goodsinprise,jdbcType=DOUBLE},
      </if>
    </set>
    where goodsNo = #{goodsno,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.pojo.Goods" >
    update goods
    set typeNo = #{typeno,jdbcType=INTEGER},
      supplierNo = #{supplierno,jdbcType=INTEGER},
      goodsName = #{goodsname,jdbcType=VARCHAR},
      goodsNorm = #{goodsnorm,jdbcType=VARCHAR},
      goodsUnit = #{goodsunit,jdbcType=VARCHAR},
      goodsCount = #{goodscount,jdbcType=INTEGER},
      goodsOutprise = #{goodsoutprise,jdbcType=DOUBLE},
      goodsInprise = #{goodsinprise,jdbcType=DOUBLE}
    where goodsNo = #{goodsno,jdbcType=INTEGER}
  </update>
</mapper>